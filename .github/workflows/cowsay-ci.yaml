name: Cowsay CI Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - version.txt
  pull_request:
    branches:
      - main

jobs:
  build-and-package:
    name: Build and Package Application
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Current Version
        id: version
        run: |
          # Check if version.txt exists; initialize if not
          if [ ! -f version.txt ]; then echo "0.0.0" > version.txt; fi
          
          # Read the current version
          CURRENT_VERSION=$(cat version.txt)
          
          # Increment the patch number
          PATCH=$(echo $CURRENT_VERSION | awk -F. '{print $3}')
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v patch=$NEW_PATCH '{major = $1; minor = $2; print major "." minor "." patch}')
          
          # Update version.txt with the new version
          echo $NEW_VERSION > version.txt
          
          # Export the new version for use in the workflow
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION, New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker Image with Version Tag
        run: |
          docker build -t cowsay:$NEW_VERSION .

      - name: Verify Docker Image
        run: |
          docker images | grep cowsay

      - name: Save Docker Image as Artifact
        run: |
          docker save cowsay:$NEW_VERSION | gzip > cowsay-$NEW_VERSION.tar.gz

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cowsay-docker-image
          path: cowsay-${{ env.NEW_VERSION }}.tar.gz

      - name: Commit Updated Version File
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
       
          # Stage, commit, and push the updated version file
          git add version.txt
          git commit -m "Bump version to $NEW_VERSION"
          git push origin main
    
  run-and-test:
    name: Run and Test Application
    needs: build-and-package
    env:
      NEW_VERSION: ${{ needs.build-and-package.outputs.version }}
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: cowsay-docker-image

      - name: Load Docker Image
        run: |
          gunzip -c cowsay-${{ env.NEW_VERSION }}.tar.gz | docker load

      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 --name cowsay-container cowsay:${{ env.NEW_VERSION }}
          sleep 5

      - name: Test Application
        run: |
          curl -o /dev/null -s -w "%{http_code}" http://localhost:8080/hello | grep -q 200 || exit 1

      - name: Cleanup
        run: |
          docker stop cowsay-container
          docker rm cowsay-container

  publish:
    name: Publish Docker Image to ECR
    needs: [build-and-package, run-and-test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
     NEW_VERSION: ${{ needs.build-and-package.outputs.version }}

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: cowsay-docker-image

      - name: Load Docker Image
        run: |
          gunzip -c cowsay-${{ env.NEW_VERSION }}.tar.gz | docker load

      - name: Login to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Tag and Push Docker Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          docker tag cowsay:${{ env.NEW_VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/dev/cowsay:${{ env.NEW_VERSION }}
          docker tag cowsay:${{ env.NEW_VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/dev/cowsay:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/dev/cowsay:${{ env.NEW_VERSION }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/dev/cowsay:latest

      - name: Login to GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag and Push Docker Image to GitHub Packages
        run: |
          docker tag cowsay:${{ env.NEW_VERSION }} ghcr.io/${{ github.repository_owner }}/cowsay:${{ env.NEW_VERSION }}
          docker tag cowsay:${{ env.NEW_VERSION }} ghcr.io/${{ github.repository_owner }}/cowsay:latest
          docker push ghcr.io/${{ github.repository_owner }}/cowsay:${{ env.NEW_VERSION }}
          docker push ghcr.io/${{ github.repository_owner }}/cowsay:latest

